// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/flagsibh/mservices/sdk/models"
)

// FindProductReader is a Reader for the FindProduct structure.
type FindProductReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindProductReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindProductOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewFindProductNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindProductOK creates a FindProductOK with default headers values
func NewFindProductOK() *FindProductOK {
	return &FindProductOK{}
}

/*FindProductOK handles this case with default header values.

Data structure representing a single product
*/
type FindProductOK struct {
	Payload *models.Product
}

func (o *FindProductOK) Error() string {
	return fmt.Sprintf("[GET /{id}][%d] findProductOK  %+v", 200, o.Payload)
}

func (o *FindProductOK) GetPayload() *models.Product {
	return o.Payload
}

func (o *FindProductOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Product)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindProductNotFound creates a FindProductNotFound with default headers values
func NewFindProductNotFound() *FindProductNotFound {
	return &FindProductNotFound{}
}

/*FindProductNotFound handles this case with default header values.

Generic error message returned as a string
*/
type FindProductNotFound struct {
	Payload *models.ErrGenericError
}

func (o *FindProductNotFound) Error() string {
	return fmt.Sprintf("[GET /{id}][%d] findProductNotFound  %+v", 404, o.Payload)
}

func (o *FindProductNotFound) GetPayload() *models.ErrGenericError {
	return o.Payload
}

func (o *FindProductNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrGenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
